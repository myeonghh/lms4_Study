# -*- coding: utf-8 -*-
"""04. 리스트

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rc32o_l_YnKvdqd2LhdsnmHDwp0EAUO5
"""

#예제37 1부터 10까지의 수를 리스트에 저장하고 출력하기

listA = []

for i in range(1, 11):  #리스트 listA에 1부터 10까지 append 함수를 이용하여 저장
    listA.append(i)

print(listA)

#예제38 10, 20, 30, 40, ... ,100 저장하고 거꾸로 출력하기

listA = []

for i in range(1, 11):  #리스트 listA에 1부터 10까지 append 함수를 이용하여 저장
    listA.append(i*10)

for i in range(9, -1, -1):  #리스트 인덱스 끝부터 처음까지 역순으로 출력
    print(listA[i], end = " ")

#예제39 리스트 요소 거꾸로 뒤집기

listA = [1, 2, 3, 4, 5, 6 ,7 ,8 ,9, 10]

for i in range(0, 4):
    temp = listA[i]
    listA[i] = listA[-(i+1)]
    listA[-(i+1)] = temp

print(listA)

#예제40 리스트a 요소 리스트 b에 거꾸로 저장하기

listA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
listB = []

for i in range(len(listA)-1, -1, -1):
    listB.append(listA[i])  #listA의 맨마지막 요소부터 첫 번째 요소까지 차례대로 listB에 저장

print(listB)

#예제41 리스트 요소 왼쪽으로 한 칸씩 원형으로 이동하기

listA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

temp = listA[0]  #listA의 첫번째 요소를 temp변수에 저장

for i in range(0, 9): listA[i] = listA[i+1]  #listA의 마지막 요소를 제외하고 각 요소를 바로 다음 index 요소로 교체

listA[-1] = temp  #listA의 마지막 요소를 아까 변수 temp에 저장해둔 첫번째 요소로 교체

print(listA)

#예제42 리스트 요소 중 최댓값 구하기

# random.randit를 사용하기 위해 random 모듈을 포함시킨다.
# random.randit(1, 100)은 1부터 100까지의 정수 중 하나를 무작위로 선택한다

import random
listA = []
max = 0

for i in range(10):  #1부터 100까지 랜덤 숫자를 listA에 10개 저장
    listA.append(random.randint(1, 100))
print(listA)

for i in range(len(listA)):             #listA의 첫번째 요소부터 마지막 요소까지 max값과 비교하여
    if listA[i] > max: max = listA[i]   #해당 요소가 max값보다 클 경우 max값을 해당요소로 교체

print(f"최댓값 : {max}")

#예제43 에라토스네스의 체 (선택문제) 에라토스네스의 체를 이용하여 1부터 100까지의 소수를 위 방법으로 구현하라

listA = []

for i in range(0, 100):
    listA.append(0)

for i in range(2, len(listA)):
    if listA[i] == 0:
        for j in range(i*2, len(listA), i):
            listA[j] = 1

for i in range(2, len(listA)):
    if a[i] == 0:
        print(i, end=" ")

#예제44 10진수를 2진수로 변환 (해당 10진수를 2로 계속 나눈뒤 나머지를 역순으로 나열한 값이 2진수)

num = int(input("10진수를 입력하세요 : "))
listA = []

while True:
    answer = num // 2  #입력 받은 10진수를 2로 나눈 몫
    rest = num % 2  #입력 받은 10진수를 2로 나눈 나머지

    listA.append(rest)  #나머지를 listA에 요소 추가

    num = answer  #10진수를 2로 나눈 몫을 num에 대입

    if num == 0:  #반복 후 몫이 0일때 반복문 빠져나감
        break

print("2진수 : ", end = "")
for i in range(0, len(listA)):
    print(listA.pop(), end = "")  #listA에 들어있는 마지막 요소부터 차례대로 출력

#예제45 2진수를 10진수로 변환

num = (input("2진수를 입력하세요 : "))
numList = []
sum = 0

for i in range(0, len(num)):  #2진수를 입력받아 차례대로 슬라이싱하여 리스트 numLIst에 추가
    numList.append(int(num[i]))

for i in range(0, len(numList)):
    num2 = numList[i] * (2**(len(numList)-1-i))  #2진수의 각 자리수 numLIst[i]가 늘어날수록 2의 거듭제곱 n승을 하나씩 줄여가며
                                                 #각 자리수 numLIst[i]와 2의n승을 곱해 줌
    sum += num2  #각 자리수마다 계산된 값을 모두 더해 줌

print(f"10진수 : {sum}")

#예제46 선형 탐색 알고리즘
#(임의의 숫자 10개를 요소로 가지는 리스트를 만들고, 키 값 입력시 인덱스를 찾아 출력 선형 탐색 알고리즘 구현)

listA = [26, 27, 39, 63, 57, 75, 11, 76, 80, 18]
num = int(input("찾고자 하는 키를 입력하세요 : "))
find = False

for i in range(0, len(listA)):
    if listA[i] == num:  #listA의 첫번째 요소부터 검사하여 만약 찾고자 하는 키값이 해당 요소와 일치하면 탐색성공 출력
        print(f"{i} 에서 탐색 성공 (list = {listA} 리스트 일 때 )")
        find = True  #찾기를 완료 했으면 find변수 값을 True로 교체
        break

if find == False: print("탐색 실패")  #만약 listA에서 해당 키값을 찾지 못하면 find 변수값이 False이므로 탐색실패 출력

#예제47 이진 탐색 알고리즘
#(임의의 숫자 10개를 요소로 가지는 리스트를 만들고, 키 값 입력시 인덱스를 찾아 출력 이진 탐색 알고리즘 구현)

listA = [11, 18, 26, 27, 39, 57, 63, 75, 76, 80]
listB = listA[:]  #listA의 요소를 똑같이 가지는 listB 리스트 변수 선언

print(listB)

num = int(input("찾고자 하는 키를 입력하세요 : "))  #사용자에게 키를 입력받아 num변수에 저장

while True:
    midIndex = len(listA) // 2  #listA 리스트의 중간 인덱스값 찾기

    if listA[midIndex] < num:
        listA = listA[midIndex + 1:]  #리스트 중간인덱스 요소가 num보다 작으면 중간 인덱스 바로 다음 인덱스에서 끝까지 리스트 슬라이싱
    elif listA[midIndex] > num:
        listA = listA[:midIndex]  #리스트 중간인덱스 요소가 num보다 크면 처음부터 중간인덱스 바로 전까지 리스트 슬라이싱
    else:
        print(f"{listB.index(num)} 에서 탐색 성공") #num값이 중간인덱스 요소와 일치하면 탐색 성공 출력 후 반복문 빠져나옴
        break

    if len(listA) == 0: #계속된 슬라이싱으로 리스트에 요소가 남아있지 않으면 탐색 실패 출력 후 반복문 빠져나옴
        print("탐색 실패")
        break

#예제48 선택 정렬 알고리즘
#임의의 리스트에 요소를 원하는 만큼 무작위로 넣고, 선택 정렬 알고리즘을 구현하여 정렬

listA = [20, 50, 30, 10, 60, 40]

for i in range(0, len(listA)):
    minNum = listA[i]
    for j in range(i, len(listA)):
        if listA[j] <= minNum:
            minNum = listA[j]
                                                # listA[i] 요소를 먼저 수정했더니 오류 발생함
    temp = listA[listA.index(minNum)]           # temp = listA[i]
    listA[listA.index(minNum)] = listA[i]       # listA[i] = listA[listA.index(minNum)]
    listA[i] = temp                             # listA[listA.index(minNum)] = temp

print(f"리스트 정렬 {listA}")

#예제49 버블 정렬 알고리즘
#임의의 리스트에 요소를 원하는 만큼 무작위로 넣고, 버블 정렬 알고리즘을 구현하여 정렬

listA = [20, 50, 30, 10, 60, 40]
#a[0] a[-5], a[1] a[-4], a[2] a[-3], a[3] a[-2], a[4] a[-1]

for i in range(0, len(listA)):
    for j in range(0, len(listA)-i):
        if listA[j] > listA[j-(len(listA)-1)]: #listA[j]가 그 다음 인덱스 요소보다 클때 요소 교체

            temp = listA[j-(len(listA)-1)]
            listA[j-(len(listA)-1)] = listA[j]
            listA[j] = temp

print(f"리스트 정렬 {listA}")

#예제50 병합 정렬 알고리즘
#임의의 리스트 2개에 요소를 원하는 만큼 무작위로 넣고, 병합 정렬 알고리즘을 구현하여 정렬
#병합 정렬은 정렬된 두 개의 데이터 집합을 하나의 정렬된 데이터 집합으로 만드는 방법

listA = [1, 3, 5, 7]
listB = [3, 4, 8, 10]
listC = []

for i in range(0, len(listA)+len(listB)):
    for j in range(0, len(listB)):
        if listA[0] < listB[0]:         #listA의 첫번째 요소가 listB의 첫번째 요소보다 작으면
            listC.append(listA.pop(0))  #listC에 listA의 첫번째 요소를 집어넣고 해당 요소 삭제(pop함수) 후
            break                       #바깥 쪽 반복문으로 빠져나감
        else:
            listC.append(listB.pop(0))  #그게 아니면 listC에 listB의 첫번째 요소를 집어넣고 해당 요소 삭제

    if len(listA) == 0:
        for k in range(0, len(listB)):  #만약 listA의 요소가 남아있지 않으면
            listC.append(listB.pop(0))  #나머지 listB 요소를 listC에 차례대로 삽입 후 요소 삭제

    if len(listB) == 0:
        for l in range(0, len(listA)):  #만약 listB의 요소가 남아있지 않으면
            listC.append(listA.pop(0))  #나머지 listA 요소를 listC에 차례대로 삽입 후 요소 삭제

print(f"리스트 병합 정렬 : {listC}")

